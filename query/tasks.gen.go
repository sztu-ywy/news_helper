// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"news_helper/model"
)

func newTask(db *gorm.DB, opts ...gen.DOOption) task {
	_task := task{}

	_task.taskDo.UseDB(db, opts...)
	_task.taskDo.UseModel(&model.Task{})

	tableName := _task.taskDo.TableName()
	_task.ALL = field.NewAsterisk(tableName)
	_task.ID = field.NewUint64(tableName, "id")
	_task.CreatedAt = field.NewUint64(tableName, "created_at")
	_task.UpdatedAt = field.NewUint64(tableName, "updated_at")
	_task.DeletedAt = field.NewUint(tableName, "deleted_at")
	_task.UserID = field.NewUint64(tableName, "user_id")
	_task.MediaIDs = field.NewField(tableName, "media_ids")
	_task.DailyTime = field.NewString(tableName, "daily_time")
	_task.Remark = field.NewString(tableName, "remark")
	_task.TaskType = field.NewString(tableName, "task_type")
	_task.Status = field.NewString(tableName, "status")
	_task.User = taskBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		UserGroup: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserGroup", "model.UserGroup"),
		},
	}

	_task.Medias = taskManyToManyMedias{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Medias", "model.Media"),
	}

	_task.fillFieldMap()

	return _task
}

type task struct {
	taskDo

	ALL       field.Asterisk
	ID        field.Uint64
	CreatedAt field.Uint64
	UpdatedAt field.Uint64
	DeletedAt field.Uint
	UserID    field.Uint64
	MediaIDs  field.Field
	DailyTime field.String
	Remark    field.String
	TaskType  field.String
	Status    field.String
	User      taskBelongsToUser

	Medias taskManyToManyMedias

	fieldMap map[string]field.Expr
}

func (t task) Table(newTableName string) *task {
	t.taskDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t task) As(alias string) *task {
	t.taskDo.DO = *(t.taskDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *task) updateTableName(table string) *task {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.CreatedAt = field.NewUint64(table, "created_at")
	t.UpdatedAt = field.NewUint64(table, "updated_at")
	t.DeletedAt = field.NewUint(table, "deleted_at")
	t.UserID = field.NewUint64(table, "user_id")
	t.MediaIDs = field.NewField(table, "media_ids")
	t.DailyTime = field.NewString(table, "daily_time")
	t.Remark = field.NewString(table, "remark")
	t.TaskType = field.NewString(table, "task_type")
	t.Status = field.NewString(table, "status")

	t.fillFieldMap()

	return t
}

func (t *task) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *task) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["media_ids"] = t.MediaIDs
	t.fieldMap["daily_time"] = t.DailyTime
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["task_type"] = t.TaskType
	t.fieldMap["status"] = t.Status

}

func (t task) clone(db *gorm.DB) task {
	t.taskDo.ReplaceConnPool(db.Statement.ConnPool)
	t.User.db = db.Session(&gorm.Session{Initialized: true})
	t.User.db.Statement.ConnPool = db.Statement.ConnPool
	t.Medias.db = db.Session(&gorm.Session{Initialized: true})
	t.Medias.db.Statement.ConnPool = db.Statement.ConnPool
	return t
}

func (t task) replaceDB(db *gorm.DB) task {
	t.taskDo.ReplaceDB(db)
	t.User.db = db.Session(&gorm.Session{})
	t.Medias.db = db.Session(&gorm.Session{})
	return t
}

type taskBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserGroup struct {
		field.RelationField
	}
}

func (a taskBelongsToUser) Where(conds ...field.Expr) *taskBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskBelongsToUser) WithContext(ctx context.Context) *taskBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskBelongsToUser) Session(session *gorm.Session) *taskBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a taskBelongsToUser) Model(m *model.Task) *taskBelongsToUserTx {
	return &taskBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a taskBelongsToUser) Unscoped() *taskBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type taskBelongsToUserTx struct{ tx *gorm.Association }

func (a taskBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a taskBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a taskBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a taskBelongsToUserTx) Unscoped() *taskBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type taskManyToManyMedias struct {
	db *gorm.DB

	field.RelationField
}

func (a taskManyToManyMedias) Where(conds ...field.Expr) *taskManyToManyMedias {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskManyToManyMedias) WithContext(ctx context.Context) *taskManyToManyMedias {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskManyToManyMedias) Session(session *gorm.Session) *taskManyToManyMedias {
	a.db = a.db.Session(session)
	return &a
}

func (a taskManyToManyMedias) Model(m *model.Task) *taskManyToManyMediasTx {
	return &taskManyToManyMediasTx{a.db.Model(m).Association(a.Name())}
}

func (a taskManyToManyMedias) Unscoped() *taskManyToManyMedias {
	a.db = a.db.Unscoped()
	return &a
}

type taskManyToManyMediasTx struct{ tx *gorm.Association }

func (a taskManyToManyMediasTx) Find() (result []*model.Media, err error) {
	return result, a.tx.Find(&result)
}

func (a taskManyToManyMediasTx) Append(values ...*model.Media) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskManyToManyMediasTx) Replace(values ...*model.Media) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskManyToManyMediasTx) Delete(values ...*model.Media) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskManyToManyMediasTx) Clear() error {
	return a.tx.Clear()
}

func (a taskManyToManyMediasTx) Count() int64 {
	return a.tx.Count()
}

func (a taskManyToManyMediasTx) Unscoped() *taskManyToManyMediasTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type taskDo struct{ gen.DO }

// FirstByID Where("id=@id")
func (t taskDo) FirstByID(id uint64) (result *model.Task, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteByID update @@table set deleted_at=NOW() where id=@id
func (t taskDo) DeleteByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update tasks set deleted_at=NOW() where id=? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t taskDo) Debug() *taskDo {
	return t.withDO(t.DO.Debug())
}

func (t taskDo) WithContext(ctx context.Context) *taskDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskDo) ReadDB() *taskDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskDo) WriteDB() *taskDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskDo) Session(config *gorm.Session) *taskDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskDo) Clauses(conds ...clause.Expression) *taskDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskDo) Returning(value interface{}, columns ...string) *taskDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskDo) Not(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskDo) Or(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskDo) Select(conds ...field.Expr) *taskDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskDo) Where(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskDo) Order(conds ...field.Expr) *taskDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskDo) Distinct(cols ...field.Expr) *taskDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskDo) Omit(cols ...field.Expr) *taskDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskDo) Join(table schema.Tabler, on ...field.Expr) *taskDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskDo) Group(cols ...field.Expr) *taskDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskDo) Having(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskDo) Limit(limit int) *taskDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskDo) Offset(offset int) *taskDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskDo) Unscoped() *taskDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskDo) Create(values ...*model.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskDo) CreateInBatches(values []*model.Task, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskDo) Save(values ...*model.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskDo) First() (*model.Task, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) Take() (*model.Task, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) Last() (*model.Task, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) Find() ([]*model.Task, error) {
	result, err := t.DO.Find()
	return result.([]*model.Task), err
}

func (t taskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Task, err error) {
	buf := make([]*model.Task, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskDo) FindInBatches(result *[]*model.Task, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskDo) Attrs(attrs ...field.AssignExpr) *taskDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskDo) Assign(attrs ...field.AssignExpr) *taskDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskDo) Joins(fields ...field.RelationField) *taskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskDo) Preload(fields ...field.RelationField) *taskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskDo) FirstOrInit() (*model.Task, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) FirstOrCreate() (*model.Task, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) FindByPage(offset int, limit int) (result []*model.Task, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskDo) Delete(models ...*model.Task) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskDo) withDO(do gen.Dao) *taskDo {
	t.DO = *do.(*gen.DO)
	return t
}
