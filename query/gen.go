// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	AnalysisResult *analysisResult
	Media          *media
	News           *news
	Task           *task
	Upload         *upload
	User           *user
	UserGroup      *userGroup
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AnalysisResult = &Q.AnalysisResult
	Media = &Q.Media
	News = &Q.News
	Task = &Q.Task
	Upload = &Q.Upload
	User = &Q.User
	UserGroup = &Q.UserGroup
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		AnalysisResult: newAnalysisResult(db, opts...),
		Media:          newMedia(db, opts...),
		News:           newNews(db, opts...),
		Task:           newTask(db, opts...),
		Upload:         newUpload(db, opts...),
		User:           newUser(db, opts...),
		UserGroup:      newUserGroup(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AnalysisResult analysisResult
	Media          media
	News           news
	Task           task
	Upload         upload
	User           user
	UserGroup      userGroup
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		AnalysisResult: q.AnalysisResult.clone(db),
		Media:          q.Media.clone(db),
		News:           q.News.clone(db),
		Task:           q.Task.clone(db),
		Upload:         q.Upload.clone(db),
		User:           q.User.clone(db),
		UserGroup:      q.UserGroup.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		AnalysisResult: q.AnalysisResult.replaceDB(db),
		Media:          q.Media.replaceDB(db),
		News:           q.News.replaceDB(db),
		Task:           q.Task.replaceDB(db),
		Upload:         q.Upload.replaceDB(db),
		User:           q.User.replaceDB(db),
		UserGroup:      q.UserGroup.replaceDB(db),
	}
}

type queryCtx struct {
	AnalysisResult *analysisResultDo
	Media          *mediaDo
	News           *newsDo
	Task           *taskDo
	Upload         *uploadDo
	User           *userDo
	UserGroup      *userGroupDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AnalysisResult: q.AnalysisResult.WithContext(ctx),
		Media:          q.Media.WithContext(ctx),
		News:           q.News.WithContext(ctx),
		Task:           q.Task.WithContext(ctx),
		Upload:         q.Upload.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserGroup:      q.UserGroup.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
