// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"news_helper/model"
)

func newMedia(db *gorm.DB, opts ...gen.DOOption) media {
	_media := media{}

	_media.mediaDo.UseDB(db, opts...)
	_media.mediaDo.UseModel(&model.Media{})

	tableName := _media.mediaDo.TableName()
	_media.ALL = field.NewAsterisk(tableName)
	_media.ID = field.NewUint64(tableName, "id")
	_media.CreatedAt = field.NewUint64(tableName, "created_at")
	_media.UpdatedAt = field.NewUint64(tableName, "updated_at")
	_media.DeletedAt = field.NewUint(tableName, "deleted_at")
	_media.Name = field.NewString(tableName, "name")
	_media.Url = field.NewString(tableName, "url")
	_media.HttpMethod = field.NewUint8(tableName, "http_method")

	_media.fillFieldMap()

	return _media
}

type media struct {
	mediaDo

	ALL        field.Asterisk
	ID         field.Uint64
	CreatedAt  field.Uint64
	UpdatedAt  field.Uint64
	DeletedAt  field.Uint
	Name       field.String // 媒体名称
	Url        field.String // 媒体链接
	HttpMethod field.Uint8  // 请求方式

	fieldMap map[string]field.Expr
}

func (m media) Table(newTableName string) *media {
	m.mediaDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m media) As(alias string) *media {
	m.mediaDo.DO = *(m.mediaDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *media) updateTableName(table string) *media {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.CreatedAt = field.NewUint64(table, "created_at")
	m.UpdatedAt = field.NewUint64(table, "updated_at")
	m.DeletedAt = field.NewUint(table, "deleted_at")
	m.Name = field.NewString(table, "name")
	m.Url = field.NewString(table, "url")
	m.HttpMethod = field.NewUint8(table, "http_method")

	m.fillFieldMap()

	return m
}

func (m *media) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *media) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["name"] = m.Name
	m.fieldMap["url"] = m.Url
	m.fieldMap["http_method"] = m.HttpMethod
}

func (m media) clone(db *gorm.DB) media {
	m.mediaDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m media) replaceDB(db *gorm.DB) media {
	m.mediaDo.ReplaceDB(db)
	return m
}

type mediaDo struct{ gen.DO }

// FirstByID Where("id=@id")
func (m mediaDo) FirstByID(id uint64) (result *model.Media, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteByID update @@table set deleted_at=NOW() where id=@id
func (m mediaDo) DeleteByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update media set deleted_at=NOW() where id=? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mediaDo) Debug() *mediaDo {
	return m.withDO(m.DO.Debug())
}

func (m mediaDo) WithContext(ctx context.Context) *mediaDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mediaDo) ReadDB() *mediaDo {
	return m.Clauses(dbresolver.Read)
}

func (m mediaDo) WriteDB() *mediaDo {
	return m.Clauses(dbresolver.Write)
}

func (m mediaDo) Session(config *gorm.Session) *mediaDo {
	return m.withDO(m.DO.Session(config))
}

func (m mediaDo) Clauses(conds ...clause.Expression) *mediaDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mediaDo) Returning(value interface{}, columns ...string) *mediaDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mediaDo) Not(conds ...gen.Condition) *mediaDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mediaDo) Or(conds ...gen.Condition) *mediaDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mediaDo) Select(conds ...field.Expr) *mediaDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mediaDo) Where(conds ...gen.Condition) *mediaDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mediaDo) Order(conds ...field.Expr) *mediaDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mediaDo) Distinct(cols ...field.Expr) *mediaDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mediaDo) Omit(cols ...field.Expr) *mediaDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mediaDo) Join(table schema.Tabler, on ...field.Expr) *mediaDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mediaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mediaDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mediaDo) RightJoin(table schema.Tabler, on ...field.Expr) *mediaDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mediaDo) Group(cols ...field.Expr) *mediaDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mediaDo) Having(conds ...gen.Condition) *mediaDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mediaDo) Limit(limit int) *mediaDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mediaDo) Offset(offset int) *mediaDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mediaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mediaDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mediaDo) Unscoped() *mediaDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mediaDo) Create(values ...*model.Media) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mediaDo) CreateInBatches(values []*model.Media, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mediaDo) Save(values ...*model.Media) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mediaDo) First() (*model.Media, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) Take() (*model.Media, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) Last() (*model.Media, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) Find() ([]*model.Media, error) {
	result, err := m.DO.Find()
	return result.([]*model.Media), err
}

func (m mediaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Media, err error) {
	buf := make([]*model.Media, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mediaDo) FindInBatches(result *[]*model.Media, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mediaDo) Attrs(attrs ...field.AssignExpr) *mediaDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mediaDo) Assign(attrs ...field.AssignExpr) *mediaDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mediaDo) Joins(fields ...field.RelationField) *mediaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mediaDo) Preload(fields ...field.RelationField) *mediaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mediaDo) FirstOrInit() (*model.Media, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) FirstOrCreate() (*model.Media, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Media), nil
	}
}

func (m mediaDo) FindByPage(offset int, limit int) (result []*model.Media, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mediaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mediaDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mediaDo) Delete(models ...*model.Media) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mediaDo) withDO(do gen.Dao) *mediaDo {
	m.DO = *do.(*gen.DO)
	return m
}
