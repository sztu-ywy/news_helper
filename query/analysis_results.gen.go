// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"news_helper/model"
)

func newAnalysisResult(db *gorm.DB, opts ...gen.DOOption) analysisResult {
	_analysisResult := analysisResult{}

	_analysisResult.analysisResultDo.UseDB(db, opts...)
	_analysisResult.analysisResultDo.UseModel(&model.AnalysisResult{})

	tableName := _analysisResult.analysisResultDo.TableName()
	_analysisResult.ALL = field.NewAsterisk(tableName)
	_analysisResult.ID = field.NewUint64(tableName, "id")
	_analysisResult.CreatedAt = field.NewUint64(tableName, "created_at")
	_analysisResult.UpdatedAt = field.NewUint64(tableName, "updated_at")
	_analysisResult.DeletedAt = field.NewUint(tableName, "deleted_at")
	_analysisResult.UserID = field.NewUint64(tableName, "user_id")
	_analysisResult.TaskID = field.NewUint64(tableName, "task_id")
	_analysisResult.Title = field.NewString(tableName, "title")
	_analysisResult.Content = field.NewString(tableName, "content")
	_analysisResult.NewsCount = field.NewInt(tableName, "news_count")
	_analysisResult.AnalysisDate = field.NewUint64(tableName, "analysis_date")
	_analysisResult.Status = field.NewString(tableName, "status")
	_analysisResult.User = analysisResultBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		UserGroup: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserGroup", "model.UserGroup"),
		},
	}

	_analysisResult.Task = analysisResultBelongsToTask{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Task", "model.Task"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Task.User", "model.User"),
		},
		Medias: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Task.Medias", "model.Media"),
		},
	}

	_analysisResult.fillFieldMap()

	return _analysisResult
}

type analysisResult struct {
	analysisResultDo

	ALL          field.Asterisk
	ID           field.Uint64
	CreatedAt    field.Uint64
	UpdatedAt    field.Uint64
	DeletedAt    field.Uint
	UserID       field.Uint64
	TaskID       field.Uint64
	Title        field.String
	Content      field.String
	NewsCount    field.Int
	AnalysisDate field.Uint64
	Status       field.String
	User         analysisResultBelongsToUser

	Task analysisResultBelongsToTask

	fieldMap map[string]field.Expr
}

func (a analysisResult) Table(newTableName string) *analysisResult {
	a.analysisResultDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analysisResult) As(alias string) *analysisResult {
	a.analysisResultDo.DO = *(a.analysisResultDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analysisResult) updateTableName(table string) *analysisResult {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint64(table, "id")
	a.CreatedAt = field.NewUint64(table, "created_at")
	a.UpdatedAt = field.NewUint64(table, "updated_at")
	a.DeletedAt = field.NewUint(table, "deleted_at")
	a.UserID = field.NewUint64(table, "user_id")
	a.TaskID = field.NewUint64(table, "task_id")
	a.Title = field.NewString(table, "title")
	a.Content = field.NewString(table, "content")
	a.NewsCount = field.NewInt(table, "news_count")
	a.AnalysisDate = field.NewUint64(table, "analysis_date")
	a.Status = field.NewString(table, "status")

	a.fillFieldMap()

	return a
}

func (a *analysisResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analysisResult) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["task_id"] = a.TaskID
	a.fieldMap["title"] = a.Title
	a.fieldMap["content"] = a.Content
	a.fieldMap["news_count"] = a.NewsCount
	a.fieldMap["analysis_date"] = a.AnalysisDate
	a.fieldMap["status"] = a.Status

}

func (a analysisResult) clone(db *gorm.DB) analysisResult {
	a.analysisResultDo.ReplaceConnPool(db.Statement.ConnPool)
	a.User.db = db.Session(&gorm.Session{Initialized: true})
	a.User.db.Statement.ConnPool = db.Statement.ConnPool
	a.Task.db = db.Session(&gorm.Session{Initialized: true})
	a.Task.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a analysisResult) replaceDB(db *gorm.DB) analysisResult {
	a.analysisResultDo.ReplaceDB(db)
	a.User.db = db.Session(&gorm.Session{})
	a.Task.db = db.Session(&gorm.Session{})
	return a
}

type analysisResultBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserGroup struct {
		field.RelationField
	}
}

func (a analysisResultBelongsToUser) Where(conds ...field.Expr) *analysisResultBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a analysisResultBelongsToUser) WithContext(ctx context.Context) *analysisResultBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a analysisResultBelongsToUser) Session(session *gorm.Session) *analysisResultBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a analysisResultBelongsToUser) Model(m *model.AnalysisResult) *analysisResultBelongsToUserTx {
	return &analysisResultBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a analysisResultBelongsToUser) Unscoped() *analysisResultBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type analysisResultBelongsToUserTx struct{ tx *gorm.Association }

func (a analysisResultBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a analysisResultBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a analysisResultBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a analysisResultBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a analysisResultBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a analysisResultBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a analysisResultBelongsToUserTx) Unscoped() *analysisResultBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type analysisResultBelongsToTask struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
	Medias struct {
		field.RelationField
	}
}

func (a analysisResultBelongsToTask) Where(conds ...field.Expr) *analysisResultBelongsToTask {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a analysisResultBelongsToTask) WithContext(ctx context.Context) *analysisResultBelongsToTask {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a analysisResultBelongsToTask) Session(session *gorm.Session) *analysisResultBelongsToTask {
	a.db = a.db.Session(session)
	return &a
}

func (a analysisResultBelongsToTask) Model(m *model.AnalysisResult) *analysisResultBelongsToTaskTx {
	return &analysisResultBelongsToTaskTx{a.db.Model(m).Association(a.Name())}
}

func (a analysisResultBelongsToTask) Unscoped() *analysisResultBelongsToTask {
	a.db = a.db.Unscoped()
	return &a
}

type analysisResultBelongsToTaskTx struct{ tx *gorm.Association }

func (a analysisResultBelongsToTaskTx) Find() (result *model.Task, err error) {
	return result, a.tx.Find(&result)
}

func (a analysisResultBelongsToTaskTx) Append(values ...*model.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a analysisResultBelongsToTaskTx) Replace(values ...*model.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a analysisResultBelongsToTaskTx) Delete(values ...*model.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a analysisResultBelongsToTaskTx) Clear() error {
	return a.tx.Clear()
}

func (a analysisResultBelongsToTaskTx) Count() int64 {
	return a.tx.Count()
}

func (a analysisResultBelongsToTaskTx) Unscoped() *analysisResultBelongsToTaskTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type analysisResultDo struct{ gen.DO }

// FirstByID Where("id=@id")
func (a analysisResultDo) FirstByID(id uint64) (result *model.AnalysisResult, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteByID update @@table set deleted_at=NOW() where id=@id
func (a analysisResultDo) DeleteByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update analysis_results set deleted_at=NOW() where id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a analysisResultDo) Debug() *analysisResultDo {
	return a.withDO(a.DO.Debug())
}

func (a analysisResultDo) WithContext(ctx context.Context) *analysisResultDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analysisResultDo) ReadDB() *analysisResultDo {
	return a.Clauses(dbresolver.Read)
}

func (a analysisResultDo) WriteDB() *analysisResultDo {
	return a.Clauses(dbresolver.Write)
}

func (a analysisResultDo) Session(config *gorm.Session) *analysisResultDo {
	return a.withDO(a.DO.Session(config))
}

func (a analysisResultDo) Clauses(conds ...clause.Expression) *analysisResultDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analysisResultDo) Returning(value interface{}, columns ...string) *analysisResultDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analysisResultDo) Not(conds ...gen.Condition) *analysisResultDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analysisResultDo) Or(conds ...gen.Condition) *analysisResultDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analysisResultDo) Select(conds ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analysisResultDo) Where(conds ...gen.Condition) *analysisResultDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analysisResultDo) Order(conds ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analysisResultDo) Distinct(cols ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analysisResultDo) Omit(cols ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analysisResultDo) Join(table schema.Tabler, on ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analysisResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analysisResultDo) RightJoin(table schema.Tabler, on ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analysisResultDo) Group(cols ...field.Expr) *analysisResultDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analysisResultDo) Having(conds ...gen.Condition) *analysisResultDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analysisResultDo) Limit(limit int) *analysisResultDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analysisResultDo) Offset(offset int) *analysisResultDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analysisResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *analysisResultDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analysisResultDo) Unscoped() *analysisResultDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analysisResultDo) Create(values ...*model.AnalysisResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analysisResultDo) CreateInBatches(values []*model.AnalysisResult, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analysisResultDo) Save(values ...*model.AnalysisResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analysisResultDo) First() (*model.AnalysisResult, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalysisResult), nil
	}
}

func (a analysisResultDo) Take() (*model.AnalysisResult, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalysisResult), nil
	}
}

func (a analysisResultDo) Last() (*model.AnalysisResult, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalysisResult), nil
	}
}

func (a analysisResultDo) Find() ([]*model.AnalysisResult, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnalysisResult), err
}

func (a analysisResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnalysisResult, err error) {
	buf := make([]*model.AnalysisResult, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analysisResultDo) FindInBatches(result *[]*model.AnalysisResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analysisResultDo) Attrs(attrs ...field.AssignExpr) *analysisResultDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analysisResultDo) Assign(attrs ...field.AssignExpr) *analysisResultDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analysisResultDo) Joins(fields ...field.RelationField) *analysisResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analysisResultDo) Preload(fields ...field.RelationField) *analysisResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analysisResultDo) FirstOrInit() (*model.AnalysisResult, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalysisResult), nil
	}
}

func (a analysisResultDo) FirstOrCreate() (*model.AnalysisResult, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnalysisResult), nil
	}
}

func (a analysisResultDo) FindByPage(offset int, limit int) (result []*model.AnalysisResult, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analysisResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analysisResultDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analysisResultDo) Delete(models ...*model.AnalysisResult) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analysisResultDo) withDO(do gen.Dao) *analysisResultDo {
	a.DO = *do.(*gen.DO)
	return a
}
